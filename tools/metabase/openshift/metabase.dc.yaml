---
kind: Template
apiVersion: v1
labels:
  app: "${NAME}"
  template: "${NAME}-dc-template"
metadata:
  name: "${NAME}"
objects:
  - kind: Secret
    apiVersion: v1
    metadata:
      name: "${NAME}-secret"
      annotations:
        template.openshift.io/expose-password: "{.data['database-password']}"
        as-copy-of: template.${NAME}-secret
    stringData:
      admin-email: "${ADMIN_EMAIL}"
      admin-password: "${ADMIN_PASSWORD}"
      admin-username: "${NAME}-admin"
      database-password: "${DATABASE_PASSWORD}"
      embedding-secret-key: "${EMBEDDING_SECRET_KEY}"
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${NAME}"
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 3000
          targetPort: 3000
      selector:
        app: "${NAME}"
      type: ClusterIP
      sessionAffinity: None
  - kind: Route
    apiVersion: v1
    metadata:
      name: "${NAME}"
    spec:
      host: "${NAME}-${NAMESPACE}.pathfinder.gov.bc.ca"
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      path: "/"
      to:
        kind: Service
        name: "${NAME}"
      port:
        targetPort: 3000-tcp
      wildcardPolicy: None
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: "${NAME}"
      annotations:
        volume.beta.kubernetes.io/storage-class: netapp-file-standard
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: "${PVC_SIZE}"
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${NAME}"
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        app: "${NAME}"
        deploymentconfig: "${NAME}"
      template:
        metadata:
          name: "${NAME}"
          labels:
            app: "${NAME}"
            deploymentconfig: "${NAME}"
        spec:
          containers:
            - command:
                - bash
                - "-c"
                - cd /app && if [[ $PR_ENVIRONMENT == 'true' ]]; then tail -f /dev/null;
                  else java -jar metabase.jar; fi
              env:
                - name: MB_DB_FILE
                  value: "/app/data/metabase.db"
                - name: MB_DB_TYPE
                  value: h2
                - name: MB_ENCRYPTION_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: "${NAME}-secret"
                      key: database-password
                - name: MB_JETTY_HOST
                  value: 0.0.0.0
                - name: MB_PASSWORD_COMPLEXITY
                  value: strong
              image: docker-registry.default.svc:5000/${NAMESPACE}/${NAME}:${VERSION}
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: "/"
                  port: 3000
                initialDelaySeconds: 120
                periodSeconds: 20
                timeoutSeconds: 10
              name: metabase
              ports:
                - containerPort: 3000
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: "/"
                  port: 3000
                initialDelaySeconds: 120
                periodSeconds: 20
                timeoutSeconds: 10
              resources:
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
              terminationMessagePath: "/dev/termination-log"
              volumeMounts:
                - mountPath: "/app/data"
                  name: "${NAME}-data"
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            - name: "${NAME}-data"
              persistentVolumeClaim:
                claimName: "${NAME}"
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - metabase
            from:
              kind: ImageStreamTag
              name: "${NAME}:${VERSION}"
              namespace: "${NAMESPACE}"
          type: ImageChange
        - type: ConfigChange
parameters:
  - name: NAME
    displayName: Name
    description: The name assigned to all of the objects defined in this template.
    required: true
    value: metabase
  - name: NAMESPACE
    description: Target namespace reference (i.e. '9f0fbe-dev')
    displayName: Namespace
    required: true
  - name: PR_ENVIRONMENT
    displayName: PR Based Environment
    description:
      A setting to turn off metabase in OpenShift namespaces where resources
      need to be minimized due to duplication of applications (one for each Pull Request).  Setting
      the value to 'true' will turn off metabase.
    value: ""
  - name: VERSION
    description: A version used for the image tags
    displayName: Version
    required: true
    value: latest
  - name: CPU_REQUEST
    description: Minimal CPU needed to run
    displayName: CPU Request
    value: 100m
  - name: CPU_LIMIT
    description: Maximum CPU allowed to use
    displayName: CPU Limit
    value: 500m
  - name: MEMORY_REQUEST
    description: Minimal amount of memory needed to run
    displayName: Memory Request
    value: 768Mi
  - name: MEMORY_LIMIT
    description: Maximum amount of memory allowed to use
    displayName: Memory Limit
    value: 1.5Gi
  - name: PVC_SIZE
    description: Amount of disk space needed for persistence
    displayName: PVC Size
    required: true
    value: 2Gi
  - name: ADMIN_EMAIL
    displayName: Admin Email
    description: The email associated with the metabase admin user
    required: true
  - name: ADMIN_PASSWORD
    displayName: Admin Password
    description:
      The password for the metabase admin user. Requires 2 upper, 2 lower,
      1 special, 1 numeric chars and minimum 8 char length
    generate: expression
    from: "[a-zA-Z0-9]{8}!@#$%^&_[a-zA-Z0-9]{8}"
    required: true
  - name: DATABASE_PASSWORD
    displayName: Database Password
    description:
      A minimum 16 character password that is generated in the target database,
      and then copied over into this field.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
  - name: EMBEDDING_SECRET_KEY
    displayName: Embedding Secret Key
    description: A key that is used to embed metabase screens from within a website
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
